***********************************************************************
*                                                                     *
*  This program written by Paul Edwards.                              *
*  Released to the public domain                                      *
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
*  amistart - startup code for AmigaOS.                               *
*                                                                     *
*  This uses the Motorola syntax                                      *
*                                                                     *
*  It puts the standard AmigaOS registers containing the command      *
*  length (d0) and command buffer (a0) as well as the AmigaPDOS       *
*  extension register (only visible if running AmigaPDOS) a6,         *
*  containing an alternative SysBase to use (only if d0 is greater    *
*  than or equal to 2 GiB, and in which case, 2 GiB should be         *
*  subtracted from d0 before use) on the stack.                       *
*                                                                     *
*  All this manipulation is left for the C startup code to handle.    *
*                                                                     *
***********************************************************************
*
        section "CODE",code
        xdef ___setj
        xdef ___longj

___amistart:
        movem.l d0/a0/a6,-(sp)
        jsr ___start
        rts

* These need to be implemented

___setj:
        rts

___longj:
        rts

* These are needed for 68000 support
* Note that just "rts" causes a crash
*        xdef __lmods
*__lmods:
*        rts
*        xdef __ldivs
*__ldivs:
*        rts
*        xdef __ldivu
*__ldivu:
*        rts
*        xdef __lmodu
*__lmodu:
*        rts


* The below code was automatically generated by fd2pragma so should
* be public domain.
* Note that when using the output of fd2pragma you should change
* all the "text" references to "CODE"
* ie SECTION "text",CODE should be SECTION "CODE",CODE
* I have removed a "." so that you can do a replace-all

	SECTION	"CODE",CODE
	XREF	_DOSBase

	XDEF	_Read
_Read:
	XDEF	Read
Read:
	MOVEM.L	D2/D3/A6,-(A7)
	MOVEA.L	_DOSBase,A6
	MOVEM.L	16(A7),D1/D2/D3
	JSR	-042(A6)
	MOVEM.L	(A7)+,D2/D3/A6
	RTS


	SECTION	"CODE",CODE
	XREF	_DOSBase

	XDEF	_Write
_Write:
	XDEF	Write
Write:
	MOVEM.L	D2/D3/A6,-(A7)
	MOVEA.L	_DOSBase,A6
	MOVEM.L	16(A7),D1/D2/D3
	JSR	-048(A6)
	MOVEM.L	(A7)+,D2/D3/A6
	RTS


	SECTION	"CODE",CODE
	XREF	_DOSBase

	XDEF	_Input
_Input:
	XDEF	Input
Input:
	MOVE.L	A6,-(A7)
	MOVEA.L	_DOSBase,A6
	JSR	-054(A6)
	MOVEA.L	(A7)+,A6
	RTS


	SECTION	"CODE",CODE
	XREF	_DOSBase

	XDEF	_Output
_Output:
	XDEF	Output
Output:
	MOVE.L	A6,-(A7)
	MOVEA.L	_DOSBase,A6
	JSR	-060(A6)
	MOVEA.L	(A7)+,A6
	RTS


	SECTION	"CODE",CODE
	XREF	_SysBase

	XDEF	_AllocMem
_AllocMem:
	XDEF	AllocMem
AllocMem:
	MOVE.L	A6,-(A7)
	MOVEA.L	_SysBase,A6
	MOVEM.L	08(A7),D0/D1
	JSR	-198(A6)
	MOVEA.L	(A7)+,A6
	RTS


	SECTION	"CODE",CODE
	XREF	_SysBase

	XDEF	_FreeMem
_FreeMem:
	XDEF	FreeMem
FreeMem:
	MOVE.L	A6,-(A7)
	MOVEA.L	_SysBase,A6
	MOVEA.L	08(A7),A1
	MOVE.L	12(A7),D0
	JSR	-210(A6)
	MOVEA.L	(A7)+,A6
	RTS


	SECTION	"CODE",CODE
	XREF	_DOSBase

	XDEF	_Open
_Open:
	XDEF	Open
Open:
	MOVEM.L	D2/A6,-(A7)
	MOVEA.L	_DOSBase,A6
	MOVEM.L	12(A7),D1/D2
	JSR	-030(A6)
	MOVEM.L	(A7)+,D2/A6
	RTS


	SECTION	"CODE",CODE
	XREF	_DOSBase

	XDEF	_Close
_Close:
	XDEF	Close
Close:
	MOVE.L	A6,-(A7)
	MOVEA.L	_DOSBase,A6
	MOVE.L	08(A7),D1
	JSR	-036(A6)
	MOVEA.L	(A7)+,A6
	RTS
